package tools

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"os"
	"testing"
	"time"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/data/azcosmos"
	"github.com/docker/go-connections/nat"
	"github.com/mark3labs/mcp-go/mcp"
	"github.com/testcontainers/testcontainers-go"
	"github.com/testcontainers/testcontainers-go/wait"
)

const (
	testOperationDBName        = "testDatabase"
	testOperationContainerName = "testContainer"
	testPartitionKey           = "/userid"
	emulatorImage              = "mcr.microsoft.com/cosmosdb/linux/azure-cosmos-emulator:vnext-preview"
	emulatorPort               = "8081"
	emulatorEndpoint           = "http://localhost:8081"
	emulatorKey                = "C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw=="
)

var (
	emulator testcontainers.Container
	client   *azcosmos.Client
)

// setupCosmosEmulator creates a CosmosDB emulator container for testing
func setupCosmosEmulator(ctx context.Context) (testcontainers.Container, error) {
	req := testcontainers.ContainerRequest{
		Image:        emulatorImage,
		ExposedPorts: []string{emulatorPort + ":8081", "1234:1234"},
		WaitingFor:   wait.ForListeningPort(nat.Port(emulatorPort)),
	}

	container, err := testcontainers.GenericContainer(ctx, testcontainers.GenericContainerRequest{
		ContainerRequest: req,
		Started:          true,
	})
	if err != nil {
		return nil, fmt.Errorf("failed to start container: %w", err)
	}

	// Give the emulator a bit more time to fully initialize
	time.Sleep(5 * time.Second)

	return container, nil
}

// setupCosmosClient creates a Cosmos DB client for the emulator
func setupCosmosClient() (*azcosmos.Client, error) {
	// Create credential with the emulator key
	cred, err := azcosmos.NewKeyCredential(emulatorKey)
	if err != nil {
		return nil, fmt.Errorf("failed to create key credential: %w", err)
	}

	// Create the client
	client, err := azcosmos.NewClientWithKey(emulatorEndpoint, cred, nil)
	if err != nil {
		return nil, fmt.Errorf("failed to create cosmos client: %w", err)
	}

	return client, nil
}

// setupDatabaseAndContainer ensures the test database and container exist
func setupDatabaseAndContainer(ctx context.Context, client *azcosmos.Client) error {
	// Try to create the test database
	databaseProps := azcosmos.DatabaseProperties{ID: testOperationDBName}
	_, err := client.CreateDatabase(ctx, databaseProps, nil)
	if err != nil && !isResourceExistsError(err) {
		return fmt.Errorf("failed to create test database: %w", err)
	}

	// Create container if it doesn't exist
	database, err := client.NewDatabase(testOperationDBName)
	if err != nil {
		return fmt.Errorf("failed to get database: %w", err)
	}

	containerProps := azcosmos.ContainerProperties{
		ID: testOperationContainerName,
		PartitionKeyDefinition: azcosmos.PartitionKeyDefinition{
			Paths: []string{"/userid"},
		},
		DefaultTimeToLive: to.Ptr[int32](60), // Short TTL for test data (60 seconds)
	}

	_, err = database.CreateContainer(ctx, containerProps, nil)
	if err != nil && !isResourceExistsError(err) {
		return fmt.Errorf("failed to create test container: %w", err)
	}

	return nil
}

// isResourceExistsError checks if error is because resource already exists (status code 409)
func isResourceExistsError(err error) bool {
	var responseErr *azcore.ResponseError
	if errors.As(err, &responseErr) {
		return responseErr.StatusCode == 409
	}
	return false
}

// cleanupTestData removes test data after tests
func cleanupTestData(ctx context.Context, t *testing.T, client *azcosmos.Client, userID, sessionID string) {
	t.Helper()
	database, err := client.NewDatabase(testOperationDBName)
	if err != nil {
		return
	}

	container, err := database.NewContainer(testOperationContainerName)
	if err != nil {
		return
	}

	// Delete the test item
	_, _ = container.DeleteItem(ctx, azcosmos.NewPartitionKeyString(userID), sessionID, nil)
}

func TestMain(m *testing.M) {
	// Set up the CosmosDB emulator container
	ctx := context.Background()
	var err error
	emulator, err = setupCosmosEmulator(ctx)
	if err != nil {
		fmt.Printf("Failed to set up CosmosDB emulator: %v\n", err)
		os.Exit(1)
	}

	// Set up the CosmosDB client
	client, err = setupCosmosClient()
	if err != nil {
		fmt.Printf("Failed to set up CosmosDB client: %v\n", err)
		os.Exit(1)
	}

	// Set up the database and container
	err = setupDatabaseAndContainer(ctx, client)
	if err != nil {
		fmt.Printf("Failed to set up database and container: %v\n", err)
		os.Exit(1)
	}

	// Run the tests
	code := m.Run()

	// Tear down the CosmosDB emulator container
	if emulator != nil {
		_ = emulator.Terminate(ctx)
	}

	os.Exit(code)
}

func TestListDatabasesHandler(t *testing.T) {
	ctx := context.Background()

	// Mock request with valid account name
	request := mcp.CallToolRequest{}

	// Use the CosmosDB emulator client
	if client == nil {
		t.Fatalf("CosmosDB client is not initialized")
	}

	// Create a test database
	databaseProps := azcosmos.DatabaseProperties{ID: "testDatabase"}
	_, err := client.CreateDatabase(ctx, databaseProps, nil)
	if err != nil && !isResourceExistsError(err) {
		t.Fatalf("Failed to create test database: %v", err)
	}

	// Call the handler
	result, err := listDatabasesHandler(ctx, request)
	if err != nil {
		t.Fatalf("listDatabasesHandler returned an error: %v", err)
	}

	// Validate the result
	if result == nil {
		t.Fatalf("Expected result, got nil")
	}

	if result.IsError {
		t.Fatalf("Expected no error, got: %v", result.IsError)
	}

	// Parse the JSON result
	var resultData map[string][]string
	err = json.Unmarshal([]byte(result.Content[0].(mcp.TextContent).Text), &resultData)
	if err != nil {
		t.Fatalf("Failed to unmarshal result JSON: %v", err)
	}

	databases, ok := resultData["databases"]
	if !ok {
		t.Fatalf("Result JSON does not contain 'databases' key")
	}

	// Check if the result contains the test database
	found := false
	for _, db := range databases {
		if db == "testDatabase" {
			found = true
			break
		}
	}

	if !found {
		t.Errorf("Expected database 'testDatabase' in result, but not found")
	}
}
